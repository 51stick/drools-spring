<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:kie="http://drools.org/schema/kie-spring"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://drools.org/schema/kie-spring
        http://drools.org/schema/kie-spring.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <!--<kie:kmodule id="message-kmodule">-->
        <!--&lt;!&ndash; 1. 如果不指定packages属性的值,则缺省状态下会加载resources文件夹下所有的.drl文件进行编译 &ndash;&gt;-->
        <!--&lt;!&ndash; 2. 如果要加载编译多个文件夹下的.drl文件，包名可以用都到分隔 &ndash;&gt;-->
        <!--&lt;!&ndash; 3. 可以以使用 kbase的includes属性，用于将当前kmodule中的其他KieBases包含到当前的KieBase中 &ndash;&gt;-->
        <!--<kie:kbase name="message_kbase" includes="message_kbase2" packages="com.rules.message">-->
            <!--<kie:ksession name="message_ksession" scope="Singleton"/>-->
        <!--</kie:kbase>-->
        <!--<kie:kbase name="message_kbase2" packages="com.rules.message2">-->
            <!--<kie:ksession name="message_ksession2" scope="Singleton"/>-->
        <!--</kie:kbase>-->
    <!--</kie:kmodule>-->

    <!--Drools supports adding 3 types of listeners to KieSessions - AgendaListener, WorkingMemoryListener, ProcessEventListener-->
    <bean id="debugAgendaEventListener" class="org.kie.api.event.rule.DebugAgendaEventListener"/>
    <bean id="debugRuleRuntimeEventListener" class="org.kie.api.event.rule.DebugRuleRuntimeEventListener"/>
    <bean id="defaultProcessEventListener" class="org.kie.api.event.process.DefaultProcessEventListener"/>

    <kie:kmodule id="book-module">
        <kie:kbase name="book_kbase" packages="com.rules.book">
            <kie:ksession name="book_price_ksession" scope="Singleton">
                <!-- 在事件监听器没有指定实现bean的使用，默认底层使用的debug的EventLister-->
                <kie:agendaEventListener />
                <kie:processEventListener />
                <kie:ruleRuntimeEventListener />

                <!-- 此处使用默认的和debug的事件监听，和上面的效果是一样的 -->
                <!--<kie:agendaEventListener ref="debugAgendaEventListener"/>
                <kie:ruleRuntimeEventListener ref="debugRuleRuntimeEventListener"/>
                <kie:processEventListener ref="defaultProcessEventListener"/>-->
            </kie:ksession>
        </kie:kbase>
    </kie:kmodule>

    <!-- 如果是使用KModuleBeanFactoryPostProcessor，并且要使用注解的话，还得开启意思下的context扫描包 -->
    <!--<context:component-scan base-package="org.kie.spring"/>-->
    <context:component-scan base-package="org.kie.spring.annotations"/>
    <bean id="kiePostProcessor" class="org.kie.spring.KModuleBeanFactoryPostProcessor" />

    <!-- 使用drools的注解形式获取，kession，kcontainer, 只需要使用KModuleAnnotationPostProcessor即可 -->
    <!--<bean id="kiePostProcessor" class="org.kie.spring.annotations.KModuleAnnotationPostProcessor"/>-->

    <!--  Using Spring Expressions (Spel)  -->
   <!--
   <kie:kmodule id="batch_commands_module">
        <kie:kbase name="drl_kiesample" packages="#{packageRepository.packages}">
            <kie:ksession name="ksessionForCommands" type="stateful"/>
        </kie:kbase>
    </kie:kmodule>

    <bean id="kiePostProcessor"
          class="org.kie.spring.KModuleBeanFactoryPostProcessor"/>

    <bean id="packageRepository" class="sample.package.class.PackageRepo">
        <property name="packages" value="drl_kiesample3">
    </bean>
    -->

</beans>
